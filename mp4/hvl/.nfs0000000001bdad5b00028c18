module mp4_tb;
`timescale 1ns/10ps

/********************* Do not touch for proper compilation *******************/
// Instantiate Interfaces
tb_itf itf();
rvfi_itf rvfi(itf.clk, itf.rst);

// Instantiate Testbench
source_tb tb(
    .magic_mem_itf(itf),
    .mem_itf(itf),
    .sm_itf(itf),
    .tb_itf(itf),
    .rvfi(rvfi)
);

// For local simulation, add signal for Modelsim to display by default
// Note that this signal does nothing and is not used for anything
bit f;

/****************************** End do not touch *****************************/

/************************ Signals necessary for monitor **********************/
// This section not required until CP2

assign rvfi.commit = ((dut.CPU.exe_mem_out.opcode != 0) && dut.CPU.load_stall_data); // Set high when a valid instruction is modifying regfile or PC
assign rvfi.halt = (rvfi.commit && rvfi.pc_rdata === rvfi.pc_wdata);;   // Set high when you detect an infinite loop
initial rvfi.order = 0;
always @(posedge itf.clk iff rvfi.commit) rvfi.order <= rvfi.order + 1; // Modify for OoO

/*
The following signals need to be set:
Instruction and trap:
    rvfi.inst
    rvfi.trap

Regfile:
    rvfi.rs1_addr
    rvfi.rs2_add
    rvfi.rs1_rdata
    rvfi.rs2_rdata
    rvfi.load_regfile
    rvfi.rd_addr
    rvfi.rd_wdata

PC:
    rvfi.pc_rdata
    rvfi.pc_wdata

Memory:
    rvfi.mem_addr
    rvfi.mem_rmask
    rvfi.mem_wmask
    rvfi.mem_rdata
    rvfi.mem_wdata

Please refer to rvfi_itf.sv for more information.
*/



// assign rvfi.inst = dut.CPU.;
assign rvfi.trap = 0;
assign rvfi.rs2_addr = dut.CPU.id_exe_out.rs2;
assign rvfi.rs1_addr = dut.CPU.id_exe_out.rs1;
assign rvfi.rs1_rdata = dut.CPU.exe_mem_in.rs1_out;
assign rvfi.rs2_rdata = dut.CPU.exe_mem_in.rs2_out;
assign rvfi.load_regfile = dut.CPU.id_control.w_en;
// assign rvfi.rd_addr = dut.CPU.WB.datapath.ctrl_mem_wb.rd;
assign rvfi.rd_wdata = dut.CPU.wb_out;
assign rvfi.pc_rdata = dut.CPU.if_id_in.pc;
assign rvfi.pc_wdata = dut.CPU.IF.datapath.pc_in;
assign rvfi.mem_addr = dut.CPU.d_mem_address;
assign rvfi.mem_rmask = dut.CPU.d_mem_byte_enable;
assign rvfi.mem_wmask = dut.CPU.d_mem_byte_enable;
assign rvfi.mem_rdata = dut.CPU.d_mem_rdata;
assign rvfi.mem_wdata = dut.CPU.EXE.datapath.alu_out;

/* Temp values ^ */


initial rvfi.order = 0;
always @(posedge itf.clk iff rvfi.commit) rvfi.order <= rvfi.order + 1; // Modify for OoO


/**************************** End RVFIMON signals ****************************/

/********************* Assign Shadow Memory Signals Here *********************/
// This section not required until CP2
/*
The following signals need to be set:
icache signals:
    itf.inst_read
    itf.inst_addr
    itf.inst_resp
    itf.inst_rdata

dcache signals:
    itf.data_read
    itf.data_write
    itf.data_mbe
    itf.data_addr
    itf.data_wdata
    itf.data_resp
    itf.data_rdata

Please refer to tb_itf.sv for more information.
*/

assign itf.inst_read = dut.CPU.i_mem_read;
assign itf.inst_addr = dut.CPU.i_mem_address;
assign itf.inst_resp = dut.i_mem_resp;
assign itf.inst_rdata = dut.i_mem_rdata;

assign itf.data_read = dut.CPU.d_mem_read;
assign itf.data_write = dut.CPU.d_mem_write;
assign itf.data_mbe = dut.CPU.d_mem_byte_enable;
assign itf.data_addr = dut.CPU.d_mem_address;
assign itf.data_wdata = dut.CPU.d_mem_wdata;
assign itf.data_resp = dut.d_mem_resp;
assign itf.data_rdata = dut.d_mem_rdata;

// assign itf.inst_read = dut.CPU.i_mem_read;
// assign itf.inst_addr = dut.CPU.i_mem_address;
// assign itf.inst_resp = dut.CPU.i_mem_resp;
// assign itf.inst_rdata = dut.CPU.i_mem_rdata;

// assign itf.data_read = dut.CPU.d_mem_read;
// assign itf.data_write = dut.CPU.d_mem_write;
// assign itf.data_mbe = dut.CPU.d_mem_byte_enable;
// assign itf.data_addr = dut.CPU.d_mem_address;
// assign itf.data_wdata = dut.CPU.d_mem_wdata;
// assign itf.data_resp = dut.CPU.d_mem_resp;
// assign itf.data_rdata = dut.CPU.d_mem_rdata;

/*********************** End Shadow Memory Assignments ***********************/

// Set this to the proper value
assign itf.registers =  dut.CPU.ID.datapath.REGFILE.data;

/*********************** Instantiate your design here ************************/
/*
The following signals need to be connected to your top level:
Clock and reset signals:
    itf.clk
    itf.rst

Burst Memory Ports:
    itf.mem_read
    itf.mem_write
    itf.mem_wdata
    itf.mem_rdata
    itf.mem_addr
    itf.mem_resp

Please refer to tb_itf.sv for more information.
*/

mp4 dut(
    .clk(itf.clk),
    .rst(itf.rst),

    .pmem_read(itf.mem_read),
    .pmem_write(itf.mem_write),
    .pmem_wdata(itf.mem_wdata),
    .pmem_rdata(itf.mem_rdata),
    .pmem_address(itf.mem_addr),
    .pmem_resp(itf.mem_resp)
);
/***************************** End Instantiation *****************************/


// int l2_hits = 0;
// int l2_misses = 0;

// int i_hits = 0;
// int i_misses = 0;

// int d_hits = 0;
// int d_misses = 0;

always @(posedge dut.clk) begin
    // if (dut.l2_cache.control.state == 2 || dut.l2_cache.control.state == 4) begin
    //     l2_hits <= l2_hits + 1;
    //     l2_misses <= l2_misses + 0;
    // end else if (dut.l2_cache.control.state == 1 || dut.l2_cache.control.state == 3) begin
    //     l2_hits <= l2_hits + 0;
    //     l2_misses <= l2_misses + 1;
    // end else begin
    //     l2_hits <= l2_hits + 0;
    //     l2_misses <= l2_misses + 0;
    // end

    // if (dut.icache.control.mem_resp == 1) begin
    //     i_hits <= i_hits + 1;
    //     i_misses <= i_misses + 0;
    // end else if (dut.icache.control.pmem_read == 1) begin
    //     i_hits <= i_hits + 0;
    //     i_misses <= i_misses + 1;
    // end else begin
    //     i_hits <= i_hits + 0;
    //     i_misses <= i_misses + 0;
    // end

    // if (dut.dcache.control.mem_resp == 1) begin
    //     d_hits <= d_hits + 1;
    //     d_misses <= d_misses + 0;
    // end else if (dut.dcache.control.pmem_read == 1) begin
    //     d_hits <= d_hits + 0;
    //     d_misses <= d_misses + 1;
    // end else begin
    //     d_hits <= d_hits + 0;
    //     d_misses <= d_misses + 0;
    // end
end

endmodule
