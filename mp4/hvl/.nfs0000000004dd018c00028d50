`ifndef SOURCE_TB
`define SOURCE_TB

`define MAGIC_MEM 0
`define PARAM_MEM 1
`define MEMORY `PARAM_MEM

// Set these to 1 to enable the feature
`define USE_SHADOW_MEMORY 1
`define USE_RVFI_MONITOR 0

`include "tb_itf.sv"

module source_tb(
    tb_itf.magic_mem magic_mem_itf,
    tb_itf.mem mem_itf,
    tb_itf.sm sm_itf,
    tb_itf.tb tb_itf,
    rvfi_itf rvfi
);

initial begin
    $display("Compilation Successful");
    tb_itf.path_mb.put("memory.lst");
    tb_itf.rst = 1'b1;
    repeat (5) @(posedge tb_itf.clk);
    tb_itf.rst = 1'b0;
end

/**************************** Halting Conditions *****************************/
int timeout = 100000000;

always @(posedge tb_itf.clk) begin
    if (rvfi.halt)
        $finish;
    if (timeout == 0) begin
        $display("TOP: Timed out");
        $finish;
    end
    timeout <= timeout - 1;
end

always @(rvfi.errcode iff (rvfi.errcode != 0)) begin
    repeat(5) @(posedge itf.clk);
    $display("TOP: Errcode: %0d", rvfi.errcode);
    $finish;
end

/************************** End Halting Conditions ***************************/
`define PARAM_RESPONSE_NS 50 * 1
`define PARAM_RESPONSE_CYCLES $ceil(`PARAM_RESPONSE_NS / `PERIOD_NS)
`define PAGE_RESPONSE_CYCLES $ceil(`PARAM_RESPONSE_CYCLES / 2.0)

logic commit;
assign commit = dut.CPU.mem_wb_out.opcode != 7'd0;
// assign commit = dut.CPU.mem_wb_out.opcode != 7'd0 && pc_old != dut.CPU.mem_wb_out.pc;

logic [63:0] order;
logic [31:0] pc, pc_old;
initial order = 0;
// initial pc = 0;

always @(posedge tb_itf.clk) begin
    pc_old <= dut.CPU.mem_wb_out.pc;
end

always_comb begin
    pc = dut.CPU.mem_wb_out.pc;
    if ((dut.CPU.mem_wb_out.opcode == 7'b1100011 && dut.CPU.mem_wb_out.br_en == 1) || dut.CPU.mem_wb_out.opcode == 7'b1101111 || dut.CPU.mem_wb_out.opcode == 7'b1100111)
        pc = dut.CPU.mem_wb_out.alu_out;
end

generate
    if (`MEMORY == `MAGIC_MEM) begin : memory
        magic_memory_dp mem(magic_mem_itf);
    end
    else if (`MEMORY == `PARAM_MEM) begin : memory
        ParamMemory #(`PARAM_RESPONSE_CYCLES, `PAGE_RESPONSE_CYCLES, 4, 256, 512) mem(mem_itf);
    end
endgenerate

generate
    if (`USE_SHADOW_MEMORY) begin
        shadow_memory sm(sm_itf);
    end

    if (`USE_RVFI_MONITOR) begin
        /* Instantiate RVFI Monitor */
        riscv_formal_monitor_rv32imc monitor(
            .clock(dut.CPU.clk),
            .reset(dut.CPU.rst),
            .rvfi_valid(commit),
            .rvfi_order(order),
            .rvfi_insn({dut.CPU.mem_wb_out.u_imm[31:12], dut.CPU.mem_wb_out.rd, dut.CPU.mem_wb_out.opcode}),
            .rvfi_trap(dut.CPU.mem_wb_out.trap), // Add
            .rvfi_halt(rvfi.halt),
            .rvfi_intr(1'b0),
            .rvfi_mode(2'b00),
            .rvfi_rs1_addr(dut.CPU.mem_wb_out.rs1),
            .rvfi_rs2_addr(dut.CPU.mem_wb_out.rs2),
            .rvfi_rs1_rdata(dut.CPU.mem_wb_out.rs1 ? dut.CPU.mem_wb_out.rs1_out : 0),
            .rvfi_rs2_rdata(dut.CPU.mem_wb_out.rs2 ? dut.CPU.mem_wb_out.rs2_out : 0),
            .rvfi_rd_addr(dut.CPU.id_control.w_en ? dut.CPU.mem_wb_out.rd : 5'd0),
            .rvfi_rd_wdata(dut.CPU.id_control.w_en ? dut.CPU.wb_out : 0),
            .rvfi_pc_rdata(dut.CPU.mem_wb_out.pc-4),
            .rvfi_pc_wdata(pc), // Add
            .rvfi_mem_addr({dut.CPU.mem_wb_out.mem_address[31:2], 2'b0}), // Add
            .rvfi_mem_rmask(dut.CPU.mem_wb_out.rmask), // Add
            .rvfi_mem_wmask(dut.CPU.mem_wb_out.wmask), // Add
            .rvfi_mem_rdata(dut.CPU.mem_wb_out.rdata), // Add
            .rvfi_mem_wdata(dut.CPU.mem_wb_out.wdata), // Add
            .rvfi_mem_extamo(1'b0),
            .errcode(rvfi.errcode)
        );
    end
endgenerate

endmodule

`endif
